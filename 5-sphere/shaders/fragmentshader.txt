#version 400

in vec3 normal;
in vec3 fragCoord;
uniform sampler2D textureSlot;
in vec2 textura;
out vec4 color;

void main(void) 
{
    vec3 mlight = vec3(1, 1, 1);
    vec3 light = vec3(1, 1, 1);

    // Corrected specular lighting
    vec3 lightDir = normalize(vec3(1, 0, 1));
    vec3 normalDir = normalize(normal);
    float lambertian = max(dot(lightDir, normalDir), 0.0);
    vec3 ambient = 0.2 * mlight;
    vec3 diffuse = lambertian * light * 1;

    // Stationary light direction
    vec3 viewDir = normalize(-fragCoord);
    vec3 reflectDir = reflect(lightDir, normalDir);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    vec3 specular = spec * light * 0.75;

    // Combine lighting calculations with texture color
    vec3 litColor = ambient + diffuse + specular;
    vec3 texColor = texture(textureSlot, textura).rgb;
    color = vec4(litColor * texColor, 1.0);
}